/*
 * NinjaRMM Webhook (API 2.0)
 *
 * Ninja RMM Public Webhook PSA documentation.
 *
 * The version of the OpenAPI document: 2.0.5-draft
 * Contact: api@ninjarmm.com
 * Generated by: https://openapi-generator.tech
 */

using net.hempux.ninjawebhook.Converters;
using Newtonsoft.Json;
using System;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Text;

namespace net.hempux.ninjawebhook.Models
{
    /// <summary>
    /// Maintenance mode status
    /// </summary>
    [DataContract]
    public class Maintenance : IEquatable<Maintenance>
    {

        /// <summary>
        /// Maintenance mode status
        /// </summary>
        /// <value>Maintenance mode status</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {

            /// <summary>
            /// Enum PENDINGEnum for PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDINGEnum = 1,

            /// <summary>
            /// Enum INMAINTENANCEEnum for IN_MAINTENANCE
            /// </summary>
            [EnumMember(Value = "IN_MAINTENANCE")]
            INMAINTENANCEEnum = 2,

            /// <summary>
            /// Enum FAILEDEnum for FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILEDEnum = 3
        }

        /// <summary>
        /// Maintenance mode status
        /// </summary>
        /// <value>Maintenance mode status</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Maintenance mode start time
        /// </summary>
        /// <value>Maintenance mode start time</value>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public long Start { get; set; }

        /// <summary>
        /// Maintenance mode end time
        /// </summary>
        /// <value>Maintenance mode end time</value>
        [DataMember(Name = "end", EmitDefaultValue = false)]
        public long End { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Maintenance {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Maintenance)obj);
        }

        /// <summary>
        /// Returns true if Maintenance instances are equal
        /// </summary>
        /// <param name="other">Instance of Maintenance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Maintenance other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Status == other.Status ||

                    Status.Equals(other.Status)
                ) &&
                (
                    Start == other.Start ||

                    Start.Equals(other.Start)
                ) &&
                (
                    End == other.End ||

                    End.Equals(other.End)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + Status.GetHashCode();

                hashCode = hashCode * 59 + Start.GetHashCode();

                hashCode = hashCode * 59 + End.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Maintenance left, Maintenance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Maintenance left, Maintenance right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
