/*
 * NinjaRMM Webhook (API 2.0)
 *
 * Ninja RMM Public Webhook PSA documentation.
 *
 * The version of the OpenAPI document: 2.0.5-draft
 * Contact: api@ninjarmm.com
 * Generated by: https://openapi-generator.tech
 */

using net.hempux.ninjawebhook.Converters;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace net.hempux.ninjawebhook.Models
{
    /// <summary>
    /// Device Role
    /// </summary>
    [DataContract]
    public class NodeRole : IEquatable<NodeRole>
    {
        /// <summary>
        /// Device Role identifier
        /// </summary>
        /// <value>Device Role identifier</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }


        /// <summary>
        /// Node Class
        /// </summary>
        /// <value>Node Class</value>
        [TypeConverter(typeof(CustomEnumConverter<NodeClassEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum NodeClassEnum
        {

            /// <summary>
            /// Enum WINDOWSSERVEREnum for WINDOWS_SERVER
            /// </summary>
            [EnumMember(Value = "WINDOWS_SERVER")]
            WINDOWSSERVEREnum = 1,

            /// <summary>
            /// Enum WINDOWSWORKSTATIONEnum for WINDOWS_WORKSTATION
            /// </summary>
            [EnumMember(Value = "WINDOWS_WORKSTATION")]
            WINDOWSWORKSTATIONEnum = 2,

            /// <summary>
            /// Enum LINUXWORKSTATIONEnum for LINUX_WORKSTATION
            /// </summary>
            [EnumMember(Value = "LINUX_WORKSTATION")]
            LINUXWORKSTATIONEnum = 3,

            /// <summary>
            /// Enum MACEnum for MAC
            /// </summary>
            [EnumMember(Value = "MAC")]
            MACEnum = 4,

            /// <summary>
            /// Enum VMWAREVMHOSTEnum for VMWARE_VM_HOST
            /// </summary>
            [EnumMember(Value = "VMWARE_VM_HOST")]
            VMWAREVMHOSTEnum = 5,

            /// <summary>
            /// Enum VMWAREVMGUESTEnum for VMWARE_VM_GUEST
            /// </summary>
            [EnumMember(Value = "VMWARE_VM_GUEST")]
            VMWAREVMGUESTEnum = 6,

            /// <summary>
            /// Enum LINUXSERVEREnum for LINUX_SERVER
            /// </summary>
            [EnumMember(Value = "LINUX_SERVER")]
            LINUXSERVEREnum = 7,

            /// <summary>
            /// Enum MACSERVEREnum for MAC_SERVER
            /// </summary>
            [EnumMember(Value = "MAC_SERVER")]
            MACSERVEREnum = 8,

            /// <summary>
            /// Enum CLOUDMONITORTARGETEnum for CLOUD_MONITOR_TARGET
            /// </summary>
            [EnumMember(Value = "CLOUD_MONITOR_TARGET")]
            CLOUDMONITORTARGETEnum = 9,

            /// <summary>
            /// Enum NMSSWITCHEnum for NMS_SWITCH
            /// </summary>
            [EnumMember(Value = "NMS_SWITCH")]
            NMSSWITCHEnum = 10,

            /// <summary>
            /// Enum NMSROUTEREnum for NMS_ROUTER
            /// </summary>
            [EnumMember(Value = "NMS_ROUTER")]
            NMSROUTEREnum = 11,

            /// <summary>
            /// Enum NMSFIREWALLEnum for NMS_FIREWALL
            /// </summary>
            [EnumMember(Value = "NMS_FIREWALL")]
            NMSFIREWALLEnum = 12,

            /// <summary>
            /// Enum NMSPRIVATENETWORKGATEWAYEnum for NMS_PRIVATE_NETWORK_GATEWAY
            /// </summary>
            [EnumMember(Value = "NMS_PRIVATE_NETWORK_GATEWAY")]
            NMSPRIVATENETWORKGATEWAYEnum = 13,

            /// <summary>
            /// Enum NMSPRINTEREnum for NMS_PRINTER
            /// </summary>
            [EnumMember(Value = "NMS_PRINTER")]
            NMSPRINTEREnum = 14,

            /// <summary>
            /// Enum NMSSCANNEREnum for NMS_SCANNER
            /// </summary>
            [EnumMember(Value = "NMS_SCANNER")]
            NMSSCANNEREnum = 15,

            /// <summary>
            /// Enum NMSDIALMANAGEREnum for NMS_DIAL_MANAGER
            /// </summary>
            [EnumMember(Value = "NMS_DIAL_MANAGER")]
            NMSDIALMANAGEREnum = 16,

            /// <summary>
            /// Enum NMSWAPEnum for NMS_WAP
            /// </summary>
            [EnumMember(Value = "NMS_WAP")]
            NMSWAPEnum = 17,

            /// <summary>
            /// Enum NMSIPSLAEnum for NMS_IPSLA
            /// </summary>
            [EnumMember(Value = "NMS_IPSLA")]
            NMSIPSLAEnum = 18,

            /// <summary>
            /// Enum NMSCOMPUTEREnum for NMS_COMPUTER
            /// </summary>
            [EnumMember(Value = "NMS_COMPUTER")]
            NMSCOMPUTEREnum = 19,

            /// <summary>
            /// Enum NMSVMHOSTEnum for NMS_VM_HOST
            /// </summary>
            [EnumMember(Value = "NMS_VM_HOST")]
            NMSVMHOSTEnum = 20,

            /// <summary>
            /// Enum NMSAPPLIANCEEnum for NMS_APPLIANCE
            /// </summary>
            [EnumMember(Value = "NMS_APPLIANCE")]
            NMSAPPLIANCEEnum = 21,

            /// <summary>
            /// Enum NMSOTHEREnum for NMS_OTHER
            /// </summary>
            [EnumMember(Value = "NMS_OTHER")]
            NMSOTHEREnum = 22,

            /// <summary>
            /// Enum NMSSERVEREnum for NMS_SERVER
            /// </summary>
            [EnumMember(Value = "NMS_SERVER")]
            NMSSERVEREnum = 23,

            /// <summary>
            /// Enum NMSPHONEEnum for NMS_PHONE
            /// </summary>
            [EnumMember(Value = "NMS_PHONE")]
            NMSPHONEEnum = 24,

            /// <summary>
            /// Enum NMSVIRTUALMACHINEEnum for NMS_VIRTUAL_MACHINE
            /// </summary>
            [EnumMember(Value = "NMS_VIRTUAL_MACHINE")]
            NMSVIRTUALMACHINEEnum = 25,

            /// <summary>
            /// Enum NMSNETWORKMANAGEMENTAGENTEnum for NMS_NETWORK_MANAGEMENT_AGENT
            /// </summary>
            [EnumMember(Value = "NMS_NETWORK_MANAGEMENT_AGENT")]
            NMSNETWORKMANAGEMENTAGENTEnum = 26
        }

        /// <summary>
        /// Node Class
        /// </summary>
        /// <value>Node Class</value>
        [DataMember(Name = "nodeClass", EmitDefaultValue = false)]
        public NodeClassEnum NodeClass { get; set; }

        /// <summary>
        /// Is custom node role?
        /// </summary>
        /// <value>Is custom node role?</value>
        [DataMember(Name = "custom", EmitDefaultValue = false)]
        public bool Custom { get; set; }


        /// <summary>
        /// Chassis Type
        /// </summary>
        /// <value>Chassis Type</value>
        [TypeConverter(typeof(CustomEnumConverter<ChassisTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ChassisTypeEnum
        {

            /// <summary>
            /// Enum UNKNOWNEnum for UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWNEnum = 1,

            /// <summary>
            /// Enum DESKTOPEnum for DESKTOP
            /// </summary>
            [EnumMember(Value = "DESKTOP")]
            DESKTOPEnum = 2,

            /// <summary>
            /// Enum LAPTOPEnum for LAPTOP
            /// </summary>
            [EnumMember(Value = "LAPTOP")]
            LAPTOPEnum = 3
        }

        /// <summary>
        /// Chassis Type
        /// </summary>
        /// <value>Chassis Type</value>
        [DataMember(Name = "chassisType", EmitDefaultValue = false)]
        public ChassisTypeEnum ChassisType { get; set; }

        /// <summary>
        /// Date created
        /// </summary>
        /// <value>Date created</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public long Created { get; set; }

        /// <summary>
        /// Tags
        /// </summary>
        /// <value>Tags</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Custom Fields
        /// </summary>
        /// <value>Custom Fields</value>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public Dictionary<string, Object> Fields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NodeRole {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  NodeClass: ").Append(NodeClass).Append("\n");
            sb.Append("  Custom: ").Append(Custom).Append("\n");
            sb.Append("  ChassisType: ").Append(ChassisType).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NodeRole)obj);
        }

        /// <summary>
        /// Returns true if NodeRole instances are equal
        /// </summary>
        /// <param name="other">Instance of NodeRole to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NodeRole other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||

                    Id.Equals(other.Id)
                ) &&
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) &&
                (
                    NodeClass == other.NodeClass ||

                    NodeClass.Equals(other.NodeClass)
                ) &&
                (
                    Custom == other.Custom ||

                    Custom.Equals(other.Custom)
                ) &&
                (
                    ChassisType == other.ChassisType ||

                    ChassisType.Equals(other.ChassisType)
                ) &&
                (
                    Created == other.Created ||

                    Created.Equals(other.Created)
                ) &&
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) &&
                (
                    Fields == other.Fields ||
                    Fields != null &&
                    other.Fields != null &&
                    Fields.SequenceEqual(other.Fields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();

                hashCode = hashCode * 59 + NodeClass.GetHashCode();

                hashCode = hashCode * 59 + Custom.GetHashCode();

                hashCode = hashCode * 59 + ChassisType.GetHashCode();

                hashCode = hashCode * 59 + Created.GetHashCode();
                if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                if (Fields != null)
                    hashCode = hashCode * 59 + Fields.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(NodeRole left, NodeRole right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NodeRole left, NodeRole right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
